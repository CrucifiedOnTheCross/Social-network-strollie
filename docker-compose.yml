version: '3.9'

services:
  localhost:
    image: alpine:latest
    command: sleep  infinity
    ports:
      - "8080:8080"  # Keycloak port
      - "8090:8090"  # oauth-sample port
      - "8082:8082"
    networks:
      - app-network
  postgres-keycloak:
    image: postgres:latest
    container_name: keycloak-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    ports:
      - "5432:5432"
    volumes:
      - postgres_keycloak_data:/var/lib/postgresql/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U keycloak" ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network
  keycloak:
    image: quay.io/keycloak/keycloak:24.0
    container_name: keycloak
    command: start-dev
    restart: unless-stopped
    environment:
      KC_DB: postgres
      KC_DB_URL_HOST: postgres-keycloak
      KC_DB_URL_DATABASE: keycloak
      KC_DB_USERNAME: keycloak
      KC_DB_PASSWORD: keycloak
      KC_HOSTNAME_ADMIN_URL: http://localhost:8080
      KC_HOSTNAME_URL: http://localhost:8080
      KC_HOSTNAME_STRICT: "false"
      KEYCLOAK_ADMIN: admin
      KEYCLOAK_ADMIN_PASSWORD: admin
    depends_on:
      postgres-keycloak:
        condition: service_healthy
    network_mode: "service:localhost"
  postgres-messenger:
    image: postgres:latest
    container_name: messenger-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: messenger_db
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    ports:
      - "5433:5432"
    volumes:
      - messenger_postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
  rabbitmq:
    image: rabbitmq:3-management
    container_name: rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
    ports:
      - "5672:5672"
      - "15672:15672"
      - "61613:61613"
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - app-network
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: client
    restart: unless-stopped
    depends_on:
      - keycloak
    network_mode: "service:localhost"
  messenger:
    build:
      context: ./messenger
      dockerfile: Dockerfile
    container_name: messenger
    restart: unless-stopped
    depends_on:
      - postgres-messenger
      - rabbitmq
    network_mode: "service:localhost"
volumes:
  postgres_keycloak_data:
  messenger_postgres_data:
  personal_cabinet_data:
  rabbitmq_data:

networks:
  app-network: